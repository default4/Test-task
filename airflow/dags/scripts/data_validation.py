import os
import glob
from PIL import Image

def validate_images(**kwargs):
    """
    Функция validate_images предназначена для поиска и проверки изображений 
    (например, кошек и собак), находящихся в каталоге с исходными данными
    
    Алгоритм работы:
      1. Определяется корневой каталог, где находятся исходные изображения
         Первоначально предполагается, что изображения лежат в /opt/airflow/images/raw/train
         Если этот каталог отсутствует, функция переключается на альтернативный 
         путь /opt/airflow/images/raw, чтобы обеспечить гибкость при распаковке данных
         
      2. С помощью модуля glob формируется список всех файлов с расширением .jpg в выбранном каталоге
      
      3. Для каждого найденного изображения производится попытка открыть его с использованием библиотеки Pillow
         - Функция img.verify() проверяет целостность файла без загрузки содержимого в память
         - Если изображение не может быть открыто или проходит проверку, переменная is_valid устанавливается в False
      
      4. В список validation_info добавляется словарь с информацией о каждом изображении:
         - "filename": имя файла (без пути)
         - "raw_path": полный путь к файлу
         - "is_valid": булев флаг, показывающий, успешно ли прошло тестирование изображения
      
      5. Функция возвращает список validation_info, содержащий информацию о всех проверенных изображениях
    """
    # Устанавливаем путь к каталогу с изображениями.
    raw_train_dir = "/opt/airflow/images/raw/train"
    if not os.path.exists(raw_train_dir):
        # Если каталог /train не существует, пробуем использовать родительский каталог
        raw_train_dir = "/opt/airflow/images/raw"

    # Ищем все файлы с расширением .jpg в указанном каталоге
    image_paths = glob.glob(os.path.join(raw_train_dir, "*.jpg"))

    validation_info = []
    
    # Проходим по каждому найденному изображению
    for path in image_paths:
        is_valid = True  # Предполагаем, что изображение валидно, пока не доказано обратное
        try:
            # Открываем изображение для проверки его целостности
            with Image.open(path) as img:
                img.verify()  # verify() проверяет, что файл не поврежден
        except Exception:
            # Если возникает ошибка, значит изображение повреждено или невалидно
            is_valid = False
        
        # Добавляем информацию о текущем изображении в список результатов
        validation_info.append({
            "filename": os.path.basename(path),  
            "raw_path": path,                      
            "is_valid": is_valid                   
        })
    
    # Возвращаем список словарей с информацией по каждому изображению
    return validation_info
