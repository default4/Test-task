import os
import time
from PIL import Image

def preprocess_images(**kwargs):
    """
    Функция preprocess_images выполняет предварительную обработку изображений, подготовленных 
    предыдущей задачей (например, validate_images). Она изменяет размер изображений до 256x256 пикселей, 
    конвертирует их в градации серого (grayscale) и сохраняет в указанной директории, а также измеряет 
    общее время обработки.

    Основные шаги:
      1. Извлечение данных из XCom: функция получает результаты проверки изображений, полученные от задачи validate_images.
      2. Создание директории для сохранения обработанных изображений, если она ещё не существует.
      3. Измерение времени обработки: фиксируется время начала обработки, затем после обработки вычисляется разница.
      4. Для каждого изображения:
         - Извлекаются имя файла, исходный путь и статус валидности.
         - Если изображение валидно, выполняется попытка его обработки:
             * Изображение открывается с использованием Pillow.
             * Изменяется его размер до 256x256 пикселей.
             * Применяется конвертация в режим grayscale.
             * Обработанное изображение сохраняется в формате JPEG в целевую директорию.
             * После сохранения извлекаются размеры и размер файла (в байтах).
         - Если возникает ошибка при обработке, изображение помечается как невалидное.
      5. Собирается список результатов, где для каждого файла сохраняется информация:
         имя, исходный путь, путь к обработанному файлу, размеры, формат, размер файла и статус валидности.
      6. Функция возвращает словарь, содержащий список результатов и общее время обработки в секундах.
    """

    # Извлекаем объект TaskInstance из аргументов (kwargs)
    ti = kwargs["ti"]
    # Получаем результаты проверки изображений, возвращённые предыдущей задачей "validate_images" через XCom
    validation_info = ti.xcom_pull(task_ids="validate_images", key="return_value")
    
    # Если предыдущая задача не вернула данные, прерываем выполнение с сообщением об ошибке
    if validation_info is None:
        raise ValueError("Не получены данные от задачи 'validate_images'. Проверьте, что задача возвращает корректный результат.")

    # Определяем директорию для сохранения обработанных изображений внутри контейнера
    processed_dir = "/opt/airflow/images/processed"
    # Создаем директорию, если её еще нет
    os.makedirs(processed_dir, exist_ok=True)

    # Фиксируем время начала обработки
    start_time = time.time()
    results = []
    
    # Проходим по всем записям, полученным от validate_images
    for item in validation_info:
        # Извлекаем имя файла, исходный путь и статус валидности из словаря
        filename = item.get("filename")
        raw_path = item.get("raw_path")
        is_valid = item.get("is_valid", False)

        # Формируем полный путь для сохранения обработанного изображения
        processed_path = os.path.join(processed_dir, filename)
        # Инициализируем переменные для размеров, формата и размера файла (по умолчанию)
        width, height, format_, file_size = 0, 0, None, 0

        # Если изображение валидно, пытаемся выполнить обработку
        if is_valid:
            try:
                # Открываем изображение
                with Image.open(raw_path) as img:
                    # Изменяем размер до 256x256 пикселей
                    img = img.resize((256, 256))
                    # Конвертируем изображение в режим grayscale (оттенки серого)
                    img = img.convert("L")
                    # Сохраняем обработанное изображение в формате JPEG по указанному пути
                    img.save(processed_path, format="JPEG")
                    # Получаем размеры изображения после обработки
                    width, height = img.size
                    # Устанавливаем формат сохранённого изображения
                    format_ = "JPEG"
                    # Получаем размер файла обработанного изображения (в байтах)
                    file_size = os.path.getsize(processed_path)
            except Exception as e:
                # Если возникла ошибка при обработке, выводим сообщение и помечаем изображение как невалидное
                print(f"Ошибка обработки изображения {filename}: {e}")
                is_valid = False

        # Добавляем информацию по текущему изображению в список результатов
        results.append({
            "filename": filename,
            "raw_path": raw_path,
            "processed_path": processed_path,
            "width": width,
            "height": height,
            "format": format_,
            "file_size": file_size,
            "is_valid": is_valid
        })
    
    # Фиксируем время завершения обработки
    end_time = time.time()
    # Вычисляем общее время обработки (в секундах)
    processing_time = end_time - start_time

    # Возвращаем словарь, содержащий список результатов и общее время обработки
    return {"results": results, "processing_time": processing_time}
